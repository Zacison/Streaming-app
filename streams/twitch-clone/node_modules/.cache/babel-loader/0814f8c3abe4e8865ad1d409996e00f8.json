{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Zach/Desktop/Programming/React udemy course/streams/twitch-clone/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport StreamForm from './StreamForm';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../redux/actions/index';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      console.log(formValues);\n      this.props.createStream(formValues);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Create a stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StreamForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this);\n  }\n\n} //form validation\n\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createStream: formValues => dispatch(createStream(formValues))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(formWrapped);","map":{"version":3,"sources":["/Users/Zach/Desktop/Programming/React udemy course/streams/twitch-clone/src/components/streams/StreamCreate.js"],"names":["React","StreamForm","connect","createStream","StreamCreate","Component","onSubmit","formValues","console","log","props","render","validate","errors","title","description","formWrapped","reduxForm","form","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,2BAA7B;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACvCC,QADuC,GAC3BC,UAAD,IAAgB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,WAAKG,KAAL,CAAWP,YAAX,CAAwBI,UAAxB;AACH,KAJsC;AAAA;;AAMvCI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAbsC,C,CAgB3C;;;AACA,MAAMC,QAAQ,GAAIL,UAAD,IAAgB;AAC7B,QAAMM,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACN,UAAU,CAACO,KAAhB,EAAuB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AAED,MAAI,CAACP,UAAU,CAACQ,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AAED,SAAOF,MAAP;AACH,CAZD;;AAcA,MAAMG,WAAW,GAAGC,SAAS,CAAC;AAC1BC,EAAAA,IAAI,EAAE,cADoB;AAE1BN,EAAAA,QAAQ,EAAEA;AAFgB,CAAD,CAAT,CAGjBR,YAHiB,CAApB;;AAKA,MAAMe,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHjB,IAAAA,YAAY,EAAGI,UAAD,IAAgBa,QAAQ,CAACjB,YAAY,CAACI,UAAD,CAAb;AADnC,GAAP;AAGH,CAJD;;AAMA,eAAeL,OAAO,CAAC,IAAD,EAAOiB,kBAAP,CAAP,CAAkCH,WAAlC,CAAf","sourcesContent":["import React from 'react';\nimport StreamForm from './StreamForm';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../redux/actions/index';\n\nclass StreamCreate extends React.Component {\n    onSubmit = (formValues) => {\n        console.log(formValues);\n        this.props.createStream(formValues);\n    };\n\n    render() {\n        return (\n            <div>\n                <h3>Create a stream</h3>\n                <StreamForm></StreamForm>\n            </div>\n        );\n    }\n}\n\n//form validation\nconst validate = (formValues) => {\n    const errors = {};\n\n    if (!formValues.title) {\n        errors.title = 'You must enter a title';\n    }\n\n    if (!formValues.description) {\n        errors.description = 'You must enter a description';\n    }\n\n    return errors;\n};\n\nconst formWrapped = reduxForm({\n    form: 'streamCreate',\n    validate: validate,\n})(StreamCreate);\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createStream: (formValues) => dispatch(createStream(formValues)),\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(formWrapped);\n"]},"metadata":{},"sourceType":"module"}