{"ast":null,"code":"import streams from '../../apis/streams';\nexport const signIn = userId => {\n  return {\n    type: 'SIGN_IN',\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: 'SIGN_OUT'\n  };\n};\nexport const createStream = (formValues, getState) => {\n  //thunk lets an action creator return an object or function\n  //redux thunk auto calls a function\n  //if redux thunk calls a function, it passes in the dispatch and getstate functions\n  //the dispatch dispatches our actions to middlewares then to reducers\n  return async dispatch => {\n    const response = await streams.post('/streams', formValues);\n    dispatch({\n      type: 'CREATE_STREAM',\n      payload: response.data\n    });\n  };\n};\nexport const fetchStreams = () => {\n  return async dispatch => {\n    const response = await streams.get('/streams');\n    dispatch({\n      type: 'FETCH_STREAMS',\n      payload: response.data\n    });\n  };\n};\nexport const fetchStream = id => {\n  return async dispatch => {\n    const response = await streams.get(`/streams/${id}`);\n    dispatch({\n      type: 'FETCH_STREAM',\n      payload: response.data\n    });\n  };\n};\nexport const editStream = (id, formValues) => {\n  return async dispatch => {\n    const response = await streams.put(`/streams/${id}`, formValues);\n    dispatch({\n      type: 'EDIT_STREAM',\n      payload: response.data\n    });\n  };\n};\nexport const deleteStream = id => {\n  return async dispatch => {\n    await streams.delete(`/streams/${id}`);\n    dispatch({\n      type: 'DELETE_STREAM',\n      payload: id\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Zach/Desktop/Programming/React udemy course/streams/twitch-clone/src/redux/actions/index.js"],"names":["streams","signIn","userId","type","payload","signOut","createStream","formValues","getState","dispatch","response","post","data","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AAEA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAE,SADH;AAEHC,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMG,YAAY,GAAG,CAACC,UAAD,EAAaC,QAAb,KAA0B;AAClD;AACA;AACA;AACA;AACA,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACW,IAAR,CAAa,UAAb,EAAyBJ,UAAzB,CAAvB;AAEAE,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAE,eADD;AAELC,MAAAA,OAAO,EAAEM,QAAQ,CAACE;AAFb,KAAD,CAAR;AAIH,GAPD;AAQH,CAbM;AAeP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,SAAO,MAAOJ,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACc,GAAR,CAAY,UAAZ,CAAvB;AACAL,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAE,eADD;AAELC,MAAAA,OAAO,EAAEM,QAAQ,CAACE;AAFb,KAAD,CAAR;AAIH,GAND;AAOH,CARM;AAUP,OAAO,MAAMG,WAAW,GAAIC,EAAD,IAAQ;AAC/B,SAAO,MAAOP,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACc,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AAEAP,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAE,cADD;AAELC,MAAAA,OAAO,EAAEM,QAAQ,CAACE;AAFb,KAAD,CAAR;AAIH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMK,UAAU,GAAG,CAACD,EAAD,EAAKT,UAAL,KAAoB;AAC1C,SAAO,MAAOE,QAAP,IAAoB;AACvB,UAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACkB,GAAR,CAAa,YAAWF,EAAG,EAA3B,EAA8BT,UAA9B,CAAvB;AAEAE,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAE,aADD;AAELC,MAAAA,OAAO,EAAEM,QAAQ,CAACE;AAFb,KAAD,CAAR;AAIH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMO,YAAY,GAAIH,EAAD,IAAQ;AAChC,SAAO,MAAOP,QAAP,IAAoB;AACvB,UAAMT,OAAO,CAACoB,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AAEAP,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAE,eADD;AAELC,MAAAA,OAAO,EAAEY;AAFJ,KAAD,CAAR;AAIH,GAPD;AAQH,CATM","sourcesContent":["import streams from '../../apis/streams';\n\nexport const signIn = (userId) => {\n    return {\n        type: 'SIGN_IN',\n        payload: userId,\n    };\n};\n\nexport const signOut = () => {\n    return {\n        type: 'SIGN_OUT',\n    };\n};\n\nexport const createStream = (formValues, getState) => {\n    //thunk lets an action creator return an object or function\n    //redux thunk auto calls a function\n    //if redux thunk calls a function, it passes in the dispatch and getstate functions\n    //the dispatch dispatches our actions to middlewares then to reducers\n    return async (dispatch) => {\n        const response = await streams.post('/streams', formValues);\n\n        dispatch({\n            type: 'CREATE_STREAM',\n            payload: response.data,\n        });\n    };\n};\n\nexport const fetchStreams = () => {\n    return async (dispatch) => {\n        const response = await streams.get('/streams');\n        dispatch({\n            type: 'FETCH_STREAMS',\n            payload: response.data,\n        });\n    };\n};\n\nexport const fetchStream = (id) => {\n    return async (dispatch) => {\n        const response = await streams.get(`/streams/${id}`);\n\n        dispatch({\n            type: 'FETCH_STREAM',\n            payload: response.data,\n        });\n    };\n};\n\nexport const editStream = (id, formValues) => {\n    return async (dispatch) => {\n        const response = await streams.put(`/streams/${id}`, formValues);\n\n        dispatch({\n            type: 'EDIT_STREAM',\n            payload: response.data,\n        });\n    };\n};\n\nexport const deleteStream = (id) => {\n    return async (dispatch) => {\n        await streams.delete(`/streams/${id}`);\n\n        dispatch({\n            type: 'DELETE_STREAM',\n            payload: id,\n        });\n    };\n};\n"]},"metadata":{},"sourceType":"module"}