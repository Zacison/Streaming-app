{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Zach/Desktop/Programming/React udemy course/streams/twitch-clone/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../redux/actions/index';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = formProps => {\n      const className = `field ${formProps.meta.error && formProps.meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: formProps.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...formProps.input,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }, this), this.renderError(formProps.meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (touched && error) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ui error message\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this);\n      }\n    };\n\n    this.onSubmit = formValues => {\n      console.log(formValues);\n      this.props.createStream(formValues);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n} //form validation\n\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createStream: formValues => dispatch(createStream())\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(formWrapped);","map":{"version":3,"sources":["/Users/Zach/Desktop/Programming/React udemy course/streams/twitch-clone/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderInput","formProps","className","meta","error","touched","label","input","renderError","onSubmit","formValues","console","log","props","render","handleSubmit","validate","errors","title","description","formWrapped","form","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../redux/actions/index';\n\nclass StreamCreate extends React.Component {\n    renderInput = (formProps) => {\n        const className = `field ${\n            formProps.meta.error && formProps.meta.touched ? 'error' : ''\n        }`;\n\n        return (\n            <div className={className}>\n                <label>{formProps.label}</label>\n                <input {...formProps.input} autoComplete=\"off\" />\n                {this.renderError(formProps.meta)}\n            </div>\n        );\n    };\n\n    renderError = ({ error, touched }) => {\n        if (touched && error) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    };\n\n    onSubmit = (formValues) => {\n        console.log(formValues);\n        this.props.createStream(formValues);\n    };\n\n    render() {\n        return (\n            <form\n                className=\"ui form error\"\n                onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                <Field\n                    name=\"title\"\n                    component={this.renderInput}\n                    label=\"Enter Title\"\n                />\n                <Field\n                    name=\"description\"\n                    component={this.renderInput}\n                    label=\"Enter Description\"\n                />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n}\n\n//form validation\nconst validate = (formValues) => {\n    const errors = {};\n\n    if (!formValues.title) {\n        errors.title = 'You must enter a title';\n    }\n\n    if (!formValues.description) {\n        errors.description = 'You must enter a description';\n    }\n\n    return errors;\n};\n\nconst formWrapped = reduxForm({\n    form: 'streamCreate',\n    validate: validate,\n})(StreamCreate);\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createStream: (formValues) => dispatch(createStream()),\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(formWrapped);\n"]},"metadata":{},"sourceType":"module"}